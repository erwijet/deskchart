generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Classroom {
    id    String @id @default(cuid())
    title String

    ownerId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    pods     Pod[]
    entities Entity[]

    sections Section[]
}

model Section {
    id    String @id @default(cuid())
    title String

    students  Student[]
    classroom Classroom @relation(fields: [classId], references: [id])
    classId   String
}

model Pod {
    id    String @id @default(cuid())
    title String
    hex   String

    seats Seat[]

    classroomId String
    classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
}

model Entity {
    id  String @id @default(cuid())
    row Int
    col Int

    type EntityType
    dir  NodeDirection

    Classroom   Classroom @relation(fields: [classroomId], references: [id])
    classroomId String
}

enum EntityType {
    WHITEBOARD
    TEACHER
    DOOR
}

model Seat {
    id  String @id @default(cuid())
    row Int
    col Int

    podId String
    pod   Pod    @relation(fields: [podId], references: [id], onDelete: Cascade)
}

model Accommodation {
    id String @id @default(cuid())

    fixedSeatId        String?
    noContactStudentId String?

    Student   Student @relation(fields: [studentId], references: [id])
    studentId String
}

model Student {
    id   String @id @default(cuid())
    name String

    ownerId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    accommodations Accommodation[]

    Section   Section @relation(fields: [sectionId], references: [id])
    sectionId String
}

enum NodeDirection {
    VERTICAL
    HORIZONTAL
}
